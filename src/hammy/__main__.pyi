import argparse
import msgspec
import requests
from _typeshed import Incomplete
from pathlib import Path
from typing import BinaryIO

EXTENSIONS: Incomplete
PLATFORMDIRS: Incomplete
CONFIG_FOLDER: Incomplete
DEFAULT_CONFIGURATION_PATH: Incomplete
DEFAULT_ENCODING: str

class DefaultConfig(msgspec.Struct, kw_only=True):
    api_key: str = ...
    txt_path: Path = ...

def parse_hammy() -> argparse.ArgumentParser: ...
def encode_hook(obj: Path | str) -> str: ...
def decode_hook(type_: type[Path], value: Path | str) -> Path | str: ...
def get_config_path(path: Path | None = None) -> Path: ...
def load_config(path: Path | None = None) -> DefaultConfig: ...
def save_config(configuration: DefaultConfig, path: Path | None = None) -> None: ...
def load_or_create_config(path: Path | None = None) -> DefaultConfig: ...

CONFIG: Incomplete

def get_useragent_header(): ...

USER_AGENT_HEADER: Incomplete

def ensure_directories_exist(config: DefaultConfig) -> None: ...
def create_retry() -> requests.Session: ...
def find_images(arg: Path) -> list[Path]: ...
def organize_pics(filenames: list[str]) -> list[Path | str]: ...
def check_width(new_width: int, width: int) -> int: ...
def resize_pics(img_bytes: BinaryIO, resize_output: BinaryIO, resize: int | None = None) -> BinaryIO: ...
def download_image(url: str, output: BinaryIO) -> BinaryIO: ...
def make_it_unique(input: BinaryIO, output: BinaryIO) -> BinaryIO: ...
def check_img_size(buffer: BinaryIO) -> BinaryIO: ...
def upload_image(image_path: Path | str, resize: int | None = None) -> tuple[str, str]: ...
def save_txt(path_name: Path, text_string: str) -> None: ...
def get_out() -> Path: ...
def format_links(link_format: str, link: str, image_id: str) -> str: ...
def change_url_suffix(url: str, new_suffix: str) -> str: ...
def is_url(s: str) -> bool: ...
def sort_sources(sources: list[str]) -> list[Path | str]: ...
def main() -> None: ...
